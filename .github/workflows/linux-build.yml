name: Linux Build

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch: {}

concurrency:
  group: linux-build-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        build_type: [Release, Debug]
    env:
      VULKAN_SDK_VERSION: latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y \
            build-essential \
            python3 \
            git \
            cmake \
            ninja-build \
            pkg-config \
            libx11-dev \
            libxrandr-dev \
            libxi-dev \
            libxcursor-dev \
            libxinerama-dev \
            libxkbcommon-dev \
            libwayland-dev

      - name: Install Vulkan SDK
        uses: jakoch/install-vulkan-sdk-action@v1.2.5
        with:
          version: ${{ env.VULKAN_SDK_VERSION }}
          components: Vulkan-Headers,Vulkan-Loader,Glslang,SPIRV-Tools,SPIRV-Headers
          cache: true
          quiet: true

      - name: Verify Vulkan SDK tools
        run: |
          echo "VULKAN_SDK=$VULKAN_SDK"
          if [ -x "$VULKAN_SDK/bin/glslc" ]; then "$VULKAN_SDK/bin/glslc" --version; else echo 'glslc not found'; exit 1; fi

      - name: Cache third-party downloads
        uses: actions/cache@v4
        with:
          path: build/_deps
          key: deps-${{ runner.os }}-${{ matrix.build_type }}-${{ hashFiles('CMakeLists.txt','cmake/*.cmake') }}
          restore-keys: |
            deps-${{ runner.os }}-${{ matrix.build_type }}-
            deps-${{ runner.os }}-

      - name: Configure CMake (${{ matrix.build_type }})
        run: |
          cmake -S . -B build -G Ninja \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

      - name: Build (${{ matrix.build_type }})
        run: |
          cmake --build build --config ${{ matrix.build_type }} --parallel

      - name: Package artifacts (${{ matrix.build_type }})
        if: success()
        run: |
          mkdir -p package
          cp build/example_template package/ || true
          cp -r build/shaders package/ || true
          cd package
          tar -czf ../vulkan-visualizer-template-linux-x64-${{ matrix.build_type }}.tar.gz .
          cd ..

      - name: Upload build artifacts (${{ matrix.build_type }})
        uses: actions/upload-artifact@v4
        with:
          name: linux-${{ matrix.build_type }}
          path: vulkan-visualizer-template-linux-x64-${{ matrix.build_type }}.tar.gz
          if-no-files-found: error
          retention-days: 7
